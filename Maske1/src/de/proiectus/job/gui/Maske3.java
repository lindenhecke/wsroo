package de.proiectus.job.gui;

import java.sql.SQLException;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.sqlcontainer.SQLContainer;
import com.vaadin.data.util.sqlcontainer.connection.JDBCConnectionPool;
import com.vaadin.data.util.sqlcontainer.connection.SimpleJDBCConnectionPool;
import com.vaadin.data.util.sqlcontainer.query.TableQuery;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

public class Maske3 extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button button_1;

	private Button button_2;

    Window subwindow;
    
    TableQuery tq;
    SQLContainer container;
    Table table;
    TextField text1;
    
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public Maske3() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		
		// top-level component properties
		//setWidth("100.0%");
		//setHeight("100.0%");
		
		Panel panel = new Panel();
		panel.setSizeFull();

		VerticalLayout vertx = new VerticalLayout();
		
		VerticalLayout vertLayout = new VerticalLayout();
		HorizontalLayout horLayout = new HorizontalLayout();
		GridLayout gridLayout = new GridLayout();
		gridLayout.setHeight("100%");
		gridLayout.setWidth("100%");
		gridLayout.setRows(10);
		gridLayout.setColumns(10);
		gridLayout.addComponent(horLayout, 0, 0, 9, 0);
		//gridLayout.addComponent(panel, 0, 3, 9, 9);
		//vertx.addComponent(gridLayout);
		//panel.setContent(gridLayout);
		//mainLayout.addComponent(vertx);
		//vertx.setSizeFull();
		mainLayout.addComponent(gridLayout);
		
		
		
		container = null;
		try {
//			JDBCConnectionPool pool = new SimpleJDBCConnectionPool(
//					"org.postgresql.Driver",
//					"jdbc:postgresql://localhost:5432/postgres", "postgres",
//					"aabb11", 2, 5);
			JDBCConnectionPool pool = new SimpleJDBCConnectionPool(
					"org.postgresql.Driver",
					"jdbc:postgresql://localhost:5432/sborm", "sborm",
					"", 2, 5);
			tq = new TableQuery("vokabel", pool);
			container = new SQLContainer(tq);

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		table = new Table("Table Vokabeln");
		table.setContainerDataSource(container);
		table.setEditable(true);
		container.setAutoCommit(true);
		
		
		// button_1
		button_1 = new Button();
		button_1.setCaption("Zurueck");
		button_1.setImmediate(false);
		button_1.setWidth("-1px");
		button_1.setHeight("-1px");
		button_1.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				mainLayout.getUI().setContent(new Maske2());
			}
		});
		
		button_2 = new Button();
		button_2.setCaption("Add");
		button_2.setImmediate(false);
		button_2.setWidth("-1px");
		button_2.setHeight("-1px");
		button_2.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				subwindowModalExample();
			}
		});
		
		String a = (String) VaadinSession.getCurrent().getAttribute("datum");		
		gridLayout.addComponent( new Label("datevalue:" + a),0,1,9,1);
		gridLayout.addComponent(table,0,2,9,8);
		gridLayout.addComponent( new Label("Hallo:" + a),0,9,9,9);
		table.setHeight("300px");
		table.setWidth("100%");		
		
		
		
		horLayout.addComponent(button_1);
		horLayout.addComponent(button_2);
	

		return mainLayout;
	}



    public void subwindowModalExample() {

        // Create the window...
        subwindow = new Window("A modal subwindow");
        // ...and make it modal
        //subwindow.setModal(true);

        // Configure the windws layout; by default a VerticalLayout
        VerticalLayout layout = new VerticalLayout();
        layout.setMargin(true);
        layout.setSpacing(true);

        // Add some content; a label and a close-button
        Label message = new Label("This is a modal subwindow.");
        text1=new TextField();
        
        layout.addComponent(text1);
        layout.addComponent(message);
        subwindow.setContent(layout);

        Button ok = new Button("OK", new Button.ClickListener() {
            // inline click-listener
            public void buttonClick(ClickEvent event) {
                // close the window by removing it from the parent window
        		
        		try {
//        			JDBCConnectionPool pool = new SimpleJDBCConnectionPool(
//        					"org.postgresql.Driver",
//        					"jdbc:postgresql://localhost:5432/postgres", "postgres",
//        					"aabb11", 2, 5);
//        			JDBCConnectionPool pool = new SimpleJDBCConnectionPool(
//        					"org.postgresql.Driver",
//        					"jdbc:postgresql://localhost:5432/sborm", "sborm",
//        					"", 2, 5);
//        			TableQuery tq = new TableQuery("vokabel", pool);
        			container = new SQLContainer(tq);
        			Object tempID=container.addItem();
            		container.getItem(tempID).getItemProperty("seite1").setValue(text1.getValue());
            		container.getItem(tempID).getItemProperty("id").setValue(new Long(33));
        			container.commit();
        			table.refreshRowCache();
        			table.markAsDirty();

        		} catch (SQLException e) {
        			// TODO Auto-generated catch block
        			e.printStackTrace();
        		}        		
          	
                getUI().removeWindow(subwindow);
                mainLayout.getUI().setContent(new Maske3());
            }
        });
        Button close = new Button("Abbruch", new Button.ClickListener() {
            // inline click-listener
            public void buttonClick(ClickEvent event) {
                // close the window by removing it from the parent window
                getUI().removeWindow(subwindow);
                
            }
        });
        // The components added to the window are actually added to the window's
        // layout; you can use either. Alignments are set using the layout
        HorizontalLayout horizontal= new HorizontalLayout();
        horizontal.addComponent(ok);
        horizontal.addComponent(close);
        layout.addComponent(horizontal);
        //layout.setComponentAlignment(close, Alignment.TOP_RIGHT);
        
        getUI().addWindow(subwindow);
        


    }
}
